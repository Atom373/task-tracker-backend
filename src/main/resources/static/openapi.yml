openapi: 3.0.1
info:
  title: Task tracker API
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: test server
paths:
  "/api/task":
    post:
      description: This method takes a task title, then creates a new Task entity and saves it in dbms.
      tags:
      - task-controller
      operationId: saveTask
      parameters:
      - name: title
        description: Title of the new task
        in: query
        required: true
        schema:
          type: string
          example: Learn how to dockerize my app
      responses:
        '201':
          description: CREATED
          content:
            application-json:
              schema:
                type: integer
                format: int64
                example: 1
                
    delete:
      description: This method deletes the Task entity by its id. [Note:In fact, this method only marks the task as deleted. Real deletion is performed by another service]
      tags:
      - task-controller
      operationId: deleteTask
      parameters:
      - name: taskId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          
  "/api/register":
    post:
      description: This method takes user email and password, then checks whether a user with such email exists. If not, creates and saves a new User entity and returns a generated jwt.
      tags:
      - registration-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegistrationRequestDto"
        required: true
      responses:
        '200':
          description: User was succesfully registrated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RegistrationResponseDto"
        '400':
          description: If user with provided email already exists an error message will be returned.
          content:
              application/json:
                schema:
                  type: string
                  example: "User with this email already exists"
                
  "/api/auth":
    post:
      description: This method takes user email and password, and processes the authentication.
      tags:
      - auth-controller
      operationId: generateToken
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthenticationRequestDto"
        required: true
      responses:
        '200':
          description: User was successfully authenticated.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthenticationResponseDto"
        '401':
          description: Authorization failed.
                
  "/api/task/title":
    patch:
      description: This method updates task title by its id.
      tags:
      - task-controller
      operationId: updateTitle
      parameters:
      - name: taskId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: title
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          
  "/api/task/is-finished":
    patch:
      description: This method updates task state (finished / not finished) by its id.
      tags:
      - task-controller
      operationId: updateState
      parameters:
      - name: taskId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: isFinished
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          
  "/api/task/description":
    patch:
      description: This method updates task description by its id.
      tags:
      - task-controller
      operationId: updateDescription
      parameters:
      - name: taskId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: description
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
  "/api/task/all":
    get:
      description: This method returns a list of all user tasks that have not been marked as deleted.
      tags:
      - task-controller
      operationId: getAllUserTasks
      responses:
        '200':
          description: OK
          content:
            application-json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Task"
components:
  schemas:
    RegistrationRequestDto:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@gmail.com"
        password:
          type: string
          example: "1234"
    RegistrationResponseDto:
      type: object
      properties:
        jwt:
          type: string
    AuthenticationRequestDto:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@gmail.com"
        password:
          type: string
          example: "1234"
    AuthenticationResponseDto:
      type: object
      properties:
        jwt:
          type: string
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Work with Docker"
        description:
          type: string
          example: "Learn how to dockerize my spring boot app"
        isFinished:
          type: boolean
          example: true
        isDeleted:
          type: boolean
          example: false
        finishingDate:
          type: string
          format: date